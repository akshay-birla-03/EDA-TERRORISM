# -*- coding: utf-8 -*-
"""TerrorismEDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kWNYPj_j4TEUOs-S6Q7W_R5C0XDj8ufp
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
!pip install squarify
import squarify

file_path = '/content/drive/MyDrive/terrorism dataset/Global Terrorism - START data.zip'  # Replace with your file path
data = pd.read_csv(file_path, encoding='ISO-8859-1')

#Basic Data Overview
print("Data Shape: ", data.shape)
print("\nColumns: ", data.columns)
print("\nData Info: ")
print(data.info())

missing_values = data.isnull().sum()
print("\nMissing Values: \n", missing_values[missing_values > 0]) #Checking for missing values

print("\nSummary Statistics: ") #Summary Statistics
print(data.describe())

plt.figure(figsize=(12,6))
sns.countplot(y='region_txt', data=data, order = data['region_txt'].value_counts().index)
plt.title('Number of Terrorist Activities by Region')
plt.xlabel('Number of Attacks')    # Analyzing Terrorist Activities by Region
plt.ylabel('Region')
plt.show()

region_counts = data['region_txt'].value_counts()
plt.figure(figsize=(12,6))
squarify.plot(sizes=region_counts.values, label=region_counts.index, alpha=0.7)
plt.title('Terrorist Activities by Region')
plt.axis('off')
plt.show()

plt.figure(figsize=(12,6))
sns.histplot(data['iyear'], bins=50)
plt.title('Terrorist Activities Over the Years') #Analyzing Terrorist Activities Over the Years
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.show()

# Analyzing Terrorist Activities Over the Years - Line Plot
plt.figure(figsize=(12,6))
sns.lineplot(x='iyear', y='eventid', data=data.groupby('iyear').count().reset_index())
plt.title('Trend of Terrorist Activities Over the Years')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.show()

#  Top Targeted Countries - Horizontal Bar Plot
plt.figure(figsize=(12,6))
country_counts = data['country_txt'].value_counts().head(10)
sns.barplot(x=country_counts.values, y=country_counts.index, palette='viridis')
plt.title('Top 10 Targeted Countries')
plt.xlabel('Number of Attacks')
plt.ylabel('Country')
plt.show()

#  Analyzing Attack Types - Pie Chart
attack_type_counts = data['attacktype1_txt'].value_counts()
plt.figure(figsize=(8,8))
plt.pie(attack_type_counts, labels=attack_type_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
plt.title('Attack Types Distribution')
plt.show()

#  Analyzing Weapon Types - Donut Chart
weapon_type_counts = data['weaptype1_txt'].value_counts()
plt.figure(figsize=(8,8))
plt.pie(weapon_type_counts, labels=weapon_type_counts.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('muted'), wedgeprops=dict(width=0.3))
plt.title('Weapon Types Used')
plt.show()

#  Analyzing Terrorist Groups - Bar Plot
plt.figure(figsize=(12,6))
group_counts = data['gname'].value_counts().iloc[1:11]  # Excluding 'Unknown'
sns.barplot(x=group_counts.values, y=group_counts.index, palette='magma')
plt.title('Top 10 Terrorist Groups')
plt.xlabel('Number of Attacks')
plt.ylabel('Group Name')
plt.show()

#  Success Rate of Terrorist Attacks - Stacked Bar Plot
success_counts = data.groupby(['iyear', 'success']).size().unstack().fillna(0)
success_counts.plot(kind='bar', stacked=True, figsize=(12,6), colormap='Paired')
plt.title('Success Rate of Terrorist Attacks Over the Years')
plt.xlabel('Year')
plt.ylabel('Number of Attacks')
plt.legend(title='Success (1: Yes, 0: No)')
plt.show()

# Identify non-numeric columns
non_numeric_columns = data.select_dtypes(exclude=[np.number]).columns
print("Non-Numeric Columns: ", non_numeric_columns)

#  Exclude non-numeric columns
numeric_data = data.select_dtypes(include=[np.number])

#  Correlation Matrix - Heatmap
plt.figure(figsize=(12,6))
corr_matrix = numeric_data.corr()
sns.heatmap(corr_matrix, annot=False, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

# Step 6: Split the numeric columns into two groups
cols = numeric_data.columns
mid = len(cols) // 2
group1 = cols[:mid]
group2 = cols[mid:]

# Step 7: Correlation Matrix - Heatmap for Group 1
plt.figure(figsize=(12,6))
corr_matrix_group1 = numeric_data[group1].corr()
sns.heatmap(corr_matrix_group1, annot=False, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix - Group 1')
plt.show()

plt.figure(figsize=(12,6))
corr_matrix_group2 = numeric_data[group2].corr()
sns.heatmap(corr_matrix_group2, annot=False, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix - Group 2')
plt.show()

#Identify the region with the highest number of terrorist activities.
most_affected_region = data['region_txt'].value_counts().idxmax()
print(f"The region most affected by terrorism is {most_affected_region}.")



# Year with the most terrorist activities.
most_active_year = data['iyear'].value_counts().idxmax()
print(f"The year with the most terrorist activities is {most_active_year}.")